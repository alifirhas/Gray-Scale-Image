## -*- texinfo -*-
## @deftypefn  {} {} dummy()
##
## This is a dummy function documentation. This file have a lot functions
## and each one have a little documentation. This text is to avoid a warning when
## install this file as part of package.
## @end deftypefn
##
## Set the graphics toolkit and force read this file as script file (not a function file).
##
graphics_toolkit qt;
##


##
##
## Begin callbacks definitions 
##

## @deftypefn  {} {} btn_open_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of btn_open control.
##
## @end deftypefn
function btn_open_doIt(src, data, main)

# Cari file
[fname, fpath, fltidx]  = uigetfile ({"*.gif;*.png;*.jpg;*.jpeg", "Supported Picture Formats"});
# gabungkan path dan nama file
file = fullfile(fpath,fname);
global img = imread(file);
axes(main.img1);
# tampilkan gambar
imshow(img, []);
axis image off;
end

## @deftypefn  {} {} btn_proses_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of btn_proses control.
##
## @end deftypefn
function btn_proses_doIt(src, data, main)

# Cari file
#[fname, fpath, fltidx]  = uigetfile ({"*.gif;*.png;*.jpg;*.jpeg", "Supported Picture Formats"});
# gabungkan path dan nama file
#file = fullfile(fpath,fname);
#img = imread(file);
axes(main.img2);
# Convert warna menjadi grayscale
global img;
gray = rgb2gray(img);
# tampilkan gambar
imshow(gray, []);
axis image off;
end

 
## @deftypefn  {} {@var{ret} = } show_main()
##
## Create windows controls over a figure, link controls with callbacks and return 
## a window struct representation.
##
## @end deftypefn
function ret = show_main()
  _scrSize = get(0, "screensize");
  _xPos = (_scrSize(3) - 588)/2;
  _yPos = (_scrSize(4) - 435)/2;
   main = figure ( ... 
	'Color', [0.937 0.937 0.937], ...
	'Position', [_xPos _yPos 588 435], ...
	'resize', 'off', ...
	'windowstyle', 'normal', ...
	'MenuBar', 'none');
	 set(main, 'visible', 'off');
  btn_open = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Arial', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [145 60 90 22], ... 
	'String', 'Open', ... 
	'TooltipString', '');
  btn_proses = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Arial', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [360 60 90 22], ... 
	'String', 'Proses', ... 
	'TooltipString', '');
  img1 = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Arial', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [58 109 236 264]);
  img2 = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Arial', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [337 105 220 265]);

  main = struct( ...
      'figure', main, ...
      'btn_open', btn_open, ...
      'btn_proses', btn_proses, ...
      'img1', img1, ...
      'img2', img2);


  set (btn_open, 'callback', {@btn_open_doIt, main});
  set (btn_proses, 'callback', {@btn_proses_doIt, main});
  dlg = struct(main);

  set(main.figure, 'visible', 'on');

%
% The source code written here will be executed when
% windows load. Works like 'onLoad' event of other languages.
%
# openFile;

  ret = main;
end

